##### Dev Mode Docker Compose #####
##############################

# Rabbitmq managed service for dev = 'amqps://naqfalzf:TvAk76rEr3GdWuGFT91f4W2SIUCMhDkK@cow.rmq2.cloudamqp.com/naqfalzf'

version: '3.9'
x-common-variables: &common-variables
  SPLINTER_SERVICE_URL: 'http://localhost:3000'
  DONATELLO_SERVICE_URL: 'http://donatello:8000'
  MICHELANGELO_SERVICE_URL: 'http://michelangelo:8001'
  LEONARDO_SERVICE_URL: 'http://leonardo:8002'
  REDIS_URL: 'redis://redis:6379'
  RABBITMQ_URL: 'amqp://rabbitmq:5672'
  APP_ENVIRONMENT: 'development'

services:
################ Core ################
  redis:
    image: redis:6.2.5
    container_name: redis
    healthcheck:
      test: redis-cli ping
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  rabbitmq:
    image: rabbitmq:3.9.4-management
    container_name: rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  nginx:
    build: ./infrastructure/nginx
    container_name: nginx
    ports:
      - "80:80"
      - "15672:15672"
    depends_on:
      - leonardo
      - splinter
      - rabbitmq
    restart: always
    volumes:
      - staticfiles_:/opt/leonardo/staticfiles

################ leonardo #################
  leonardo-db:
    image: postgres:13.4-alpine
    container_name: leonardo-db
    volumes:
      - leonardo-db-volume:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=fastapi
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: pg_isready -U postgres
      interval: 5s
      retries: 5
    restart: always

  leonardo:
    image: nirooma/leonardo:latest
    container_name: leonardo
    command: python manage.py runserver 0.0.0.0:8002
    environment:
      <<: *common-variables
      SQL_ENGINE: django.db.backends.postgresql
      SQL_DATABASE: fastapi
      SQL_USER: postgres
      SQL_PASSWORD: postgres
      SQL_HOST: leonardo-db
      SQL_PORT: 5432
    depends_on:
      - leonardo-db
      - rabbitmq
    volumes:
      - ./services/leonardo:/opt/leonardo
      - staticfiles_:/opt/leonardo/staticfiles
    ports:
      - "8002:8002"

################# donatello ##################
  donatello-db:
    image: postgres:13.4-alpine
    container_name: donatello-db
    volumes:
      - donatello-db-volume:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=fastapi
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: pg_isready -U postgres
      interval: 5s
      retries: 5
    restart: always

#  donatello-worker:
#    build: ./services/donatello
#    container_name: donatello-worker
#    command: celery -A app.core.worker.celery worker --loglevel=info
#    environment:
#      <<: *common-variables
#      DONATELLO_DATABASE_URL: 'postgresql+asyncpg://postgres:postgres@donatello-db:5432/fastapi'
#    volumes:
#      - ./services/donatello:/opt/donatello
#    depends_on:
#      - donatello
#      - rabbitmq
#      - redis
#    healthcheck:
#      test: celery inspect ping -A app.core.worker.celery
#      interval: 60s
#      timeout: 30s
#      retries: 3
#    restart: always

  donatello:
    image: nirooma/donatello:latest
    container_name: donatello
    command: uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    environment:
      <<: *common-variables
      DONATELLO_DATABASE_URL: 'postgresql+asyncpg://postgres:postgres@donatello-db:5432/fastapi'
    volumes:
      - ./services/donatello:/opt/donatello
    healthcheck:
      test: curl -f http://localhost:8000/health || exit 1
      interval: 60s
      timeout: 30s
      retries: 3
    restart: always

############### splinter ###################
  splinter:
    image: nirooma/splinter:latest # M1 issue
#    build: ./services/splinter
    command: yarn run dev
    container_name: splinter
    environment: *common-variables
    ports:
      - "3000:3000"
    volumes:
      - ./services/splinter:/opt/splinter
      - /opt/splinter/node_modules

################# kimberly ##################
  kimberly:
    image: nirooma/kimberly:latest
    command: python main.py
    container_name: kimberly
    environment: *common-variables
    env_file:
      - "/Users/nirmansour/.pems/eMicroservices.txt"
    volumes:
      - ./workers/kimberly:/opt/kimberly
    depends_on:
      - rabbitmq
      - michelangelo

############### michelangelo ################
  michelangelo-db:
    image: postgres:13.4-alpine
    container_name: michelangelo-db
    volumes:
      - michelangelo-db-volume:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=fastapi
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: pg_isready -U postgres
      interval: 5s
      retries: 5
    restart: always

  michelangelo-worker:
    image: nirooma/michelangelo:latest
    container_name: michelangelo-worker
    command: python worker.py
    environment:
      <<: *common-variables
      MICHELANGELO_DATABASE_URL: 'postgres://postgres:postgres@michelangelo-db:5432/fastapi'
    volumes:
      - ./services/michelangelo:/opt/michelangelo
    restart: on-failure
    depends_on:
      - michelangelo-db
      - michelangelo

  michelangelo:
    image: nirooma/michelangelo:latest
    container_name: michelangelo
    command: uvicorn main:app --reload --workers 1 --host 0.0.0.0 --port 8001
    environment:
      <<: *common-variables
      MICHELANGELO_DATABASE_URL: 'postgres://postgres:postgres@michelangelo-db:5432/fastapi'
    volumes:
      - ./services/michelangelo:/opt/michelangelo
    healthcheck:
      test: curl -f http://localhost:8001/health || exit 1
      interval: 5m
      timeout: 30s
      retries: 3
    restart: always
    ports:
      - "8001:8001"
    depends_on:
      - michelangelo-db
      - rabbitmq

############### tommy ##############
  tommy:
    image: nirooma/tommy:latest
    container_name: tommy
    command:  uvicorn main:app --reload --workers 1 --host 0.0.0.0 --port 8003
    environment:
      REDIS_URL: 'redis://redis:6379'
    volumes:
      - ./workers/tommy:/opt/tommy
    healthcheck:
      test: curl -f http://localhost:8003/health || exit 1
      interval: 5m
      timeout: 30s
      retries: 3
    restart: always
    ports:
      - "8003:8003"
    depends_on:
      - redis

############### volumes ##############
volumes:
  donatello-db-volume:
  leonardo-db-volume:
  michelangelo-db-volume:
  staticfiles_:
